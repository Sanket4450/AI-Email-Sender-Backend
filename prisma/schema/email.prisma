model Email {
  id             String         @id @default(cuid())
  subject        String
  body           String
  messageId      String?
  contactId      String
  contact        Contact        @relation(fields: [contactId], references: [id])
  isBounced      Boolean        @default(false)
  isSpamReported Boolean        @default(false)
  senderId       String
  sender         Sender         @relation(fields: [senderId], references: [id])
  emailTags      EmailTag[]
  emailPurposes EmailPurpose[]
  events         EmailEvent[]
  followUps      FollowUp[]
  notifications  Notification[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([subject])
  @@map("email")
}

model EmailEvent {
  id        String         @id @default(cuid())
  emailId   String
  email     Email          @relation(fields: [emailId], references: [id])
  eventType EmailEventType
  createdAt DateTime       @default(now())

  @@map("email_event")
}

model FollowUp {
  id             String          @id @default(cuid())
  subject        String
  body           String
  emailId        String
  email          Email           @relation(fields: [emailId], references: [id])
  scheduledAt    DateTime?
  isBounced      Boolean         @default(false)
  isSpamReported Boolean         @default(false)
  events         FollowUpEvent[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([subject])
  @@map("follow_up")
}

model FollowUpEvent {
  id         String         @id @default(cuid())
  followUpId String
  FollowUp   FollowUp       @relation(fields: [followUpId], references: [id])
  eventType  EmailEventType
  createdAt  DateTime       @default(now())

  @@map("follow_up_event")
}

enum EmailEventType {
  processed
  delivered
  opened
  clicked
}

model Draft {
  id            String         @id @default(cuid())
  subject       String?
  body          String?
  scheduledAt   DateTime?
  senderId      String?
  sender        Sender?        @relation(fields: [senderId], references: [id])
  draftContacts DraftContact[]
  draftTags     DraftTag[]
  draftPurposes DraftPurpose[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([subject])
  @@map("draft")
}

model DraftContact {
  draftId   String
  contactId String
  draft     Draft   @relation(fields: [draftId], references: [id])
  contact   Contact @relation(fields: [contactId], references: [id])

  @@id([draftId, contactId])
  @@map("draft_contact")
}
